
It looks like you're using inheritance in a way that doesn't make sense. For example, the _Weekends class inherits from both the _Saturday and _Sunday classes, but both of those classes only contain methods for handling a single day of the week(Saturday or Sunday, respectively). It would probably make more sense to define a Weekday class that contains methods for handling a single day of the week, and then have each of your classes(_Saturday, _Sunday, etc.) inherit from that class .

Instead of defining separate classes for each day of the week, you could define a single Calendar class that contains methods for handling all the days of the week. This would make your code more modular and easier to maintain.

You can use the calendar.Calendar class to easily get a list of days for a given month and year. This would allow you to remove the list_of_days method from your code, and would make it easier to implement the methods for handling individual days of the week.


Instead of using the datetime.date class to determine the day of the week for a given date, you could use the calendar.day_name method. This would make your code simpler and more readable.

You can use the isoweek module to easily get the number of weeks in a given month. This would allow you to remove the number_of_weeks method from your code.

You can use the @ property decorator to define "getter" methods that can be accessed like attributes. For example, instead of defining a number_of_saturdays method that returns the number of Saturdays in a given month, you could define a saturdays property that returns the number of Saturdays. This would make your code more readable and more Pythonic.

I hope these suggestions are helpful! Let me know if you have any other questions.


class Calendar:
    def __init__(self, year, month):
        self.year = year
        self.month = month

    @property
    def saturdays(self):
        # Get the list of days for the given month and year
        days = calendar.Calendar().itermonthdays2(self.year, self.month)

        # Return the number of Saturdays in the list of days
        return len([day for day, weekday in days if weekday == 5])
